#!/bin/bash

# Prevent running inside an existing tmux session
if [ -n "$TMUX" ]; then
  echo "You're already inside a tmux session. Exit it before running this script."
  exit 1
fi

# Get NAME from first arg or prompt
if [ -n "$1" ]; then
  NAME="$1"
else
  read -p "NAME: " NAME
fi

ENV_FILE=".env.$NAME"
LOG_DIR="logs"
LOG_FILE="$LOG_DIR/$NAME.log"

# Create logs directory if missing
mkdir -p "$LOG_DIR"

# Create .env.$NAME only if it doesn't exist
if [ -f "$ENV_FILE" ]; then
  echo "$ENV_FILE already exists, skipping creation."
else
  read -p "BOT_TOKEN: " BOT_TOKEN
  read -p "GROUP_ID: " GROUP_ID
  read -p "API_KEY: " API_KEY
  read -p "API_SECRET: " API_SECRET
  read -p "DEFAULT_THRESHOLD: " DEFAULT_THRESHOLD
  read -p "SYNC_INTERVAL_MINUTES: " SYNC_INTERVAL_MINUTES
  read -p "ADMIN_IDS (e.g., [1,2,3]): " ADMIN_IDS

  cat > "$ENV_FILE" <<EOF
NAME=$NAME
BOT_TOKEN=$BOT_TOKEN
GROUP_ID=$GROUP_ID
API_KEY=$API_KEY
API_SECRET=$API_SECRET
DEFAULT_THRESHOLD=$DEFAULT_THRESHOLD
SYNC_INTERVAL_MINUTES=$SYNC_INTERVAL_MINUTES
ADMIN_IDS=$ADMIN_IDS
EOF

  echo "Created $ENV_FILE"
fi

# Start new detached tmux session with output logged
tmux new-session -d -s "$NAME" "export \$(xargs < $ENV_FILE); npm run start > $LOG_FILE 2>&1"

echo "Tmux session '$NAME' started and detached."
echo "Logs are being written to $LOG_FILE"
